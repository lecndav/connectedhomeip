# Copyright (c) 2021 Project CHIP Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build_overrides/allwinner.gni")
import("//build_overrides/chip.gni")
import("//build_overrides/mbedtls.gni")

import("d1_board.gni")

declare_args() {
  # Location of the bl602 SDK.
  d1_sdk_root = "${chip_root}/third_party/allwinner/d1/repo"
}

assert(d1_sdk_root != "", "d1_sdk_root must be specified")

# Defines an bl602 SDK build target.
#
# Parameters:
#   d1_sdk_root - The location of the bl602 SDK.
#   sources - The sources files to build.
template("d1_sdk") {
  if (defined(invoker.d1_sdk_root)) {
    d1_sdk_root = invoker.d1_sdk_root
  }

  assert(d1_sdk_root != "", "d1_sdk_root must be specified")

  sdk_target_name = target_name

  config("${sdk_target_name}_config") {
    include_dirs = []
    libs = []
    if (defined(invoker.include_dirs)) {
      include_dirs += invoker.include_dirs
    }

    _include_dirs = [
      "${chip_root}/third_party/mbedtls/repo/include",
    ]

    defines = [
      "ARCH_RISCV"
    ]

    cflags = [
      "-include",
      rebase_path(root_build_dir),
    ]

    cflags += [
      "-Wno-maybe-uninitialized",
      "-Wno-shadow",
      "-Wno-error",
      "-fcommon",
      "-fno-jump-tables",
    ]

    cflags_cc = [ "-fpermissive" ]
    cflags_cc += [ "-std=c++17" ]
    cflags_cc += [ "-D _GNU_SOURCE" ]

    foreach(include_dir, _include_dirs) {
      cflags += [ "-isystem" + rebase_path(include_dir, root_build_dir) ]
    }

    cflags += [ "-save-temps=obj" ]
    cflags += [ "-Wno-maybe-uninitialized" ]

    if (defined(invoker.defines)) {
      defines += invoker.defines
    }
  }

  source_set(sdk_target_name) {
    sources = [
      "${chip_root}/third_party/mbedtls/repo/library/aes.c",
      "${chip_root}/third_party/mbedtls/repo/library/asn1parse.c",
      "${chip_root}/third_party/mbedtls/repo/library/asn1write.c",
      "${chip_root}/third_party/mbedtls/repo/library/bignum.c",
      "${chip_root}/third_party/mbedtls/repo/library/ccm.c",
      "${chip_root}/third_party/mbedtls/repo/library/cipher.c",
      "${chip_root}/third_party/mbedtls/repo/library/cipher_wrap.c",
      "${chip_root}/third_party/mbedtls/repo/library/constant_time.c",
      "${chip_root}/third_party/mbedtls/repo/library/ctr_drbg.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecdh.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecdsa.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecp.c",
      "${chip_root}/third_party/mbedtls/repo/library/ecp_curves.c",
      "${chip_root}/third_party/mbedtls/repo/library/entropy.c",
      "${chip_root}/third_party/mbedtls/repo/library/hkdf.c",
      "${chip_root}/third_party/mbedtls/repo/library/hmac_drbg.c",
      "${chip_root}/third_party/mbedtls/repo/library/md.c",
      "${chip_root}/third_party/mbedtls/repo/library/oid.c",
      "${chip_root}/third_party/mbedtls/repo/library/pk.c",
      "${chip_root}/third_party/mbedtls/repo/library/pk_wrap.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkcs5.c",
      "${chip_root}/third_party/mbedtls/repo/library/pkwrite.c",
      "${chip_root}/third_party/mbedtls/repo/library/platform.c",
      "${chip_root}/third_party/mbedtls/repo/library/platform_util.c",
      "${chip_root}/third_party/mbedtls/repo/library/sha256.c",
      "${chip_root}/third_party/mbedtls/repo/library/sha512.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509_create.c",
      "${chip_root}/third_party/mbedtls/repo/library/x509write_csr.c",
    ]

    public_deps = []

    if (defined(invoker.sources)) {
      sources += invoker.sources
    }

    public_configs = [ ":${sdk_target_name}_config" ]
  }
}
